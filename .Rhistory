# filter cells
cdseq_synth_scRNA_seurat[["percent.mt"]] <- Seurat::PercentageFeatureSet(cdseq_synth_scRNA_seurat, pattern = "^MT-")
if(cell_filter){
cdseq_synth_scRNA_seurat <- subset(cdseq_synth_scRNA_seurat, subset = nFeature_RNA > 200 & nFeature_RNA < 4000  & percent.mt < 10)#nFeature_RNA > 20 & nFeature_RNA < 2500)
}
# normalize
cdseq_synth_scRNA_seurat <- Seurat::NormalizeData(cdseq_synth_scRNA_seurat, normalization.method = "LogNormalize" , scale.factor = 10000, verbose = FALSE)
# select genes
cdseq_synth_scRNA_seurat <- Seurat::FindVariableFeatures(cdseq_synth_scRNA_seurat, selection.method = "vst", nfeatures = 1000, verbose = FALSE)
cdseq_synth_scRNA_seurat <- Seurat::ScaleData(cdseq_synth_scRNA_seurat,verbose = FALSE)
cdseq_synth_scRNA_seurat <- Seurat::RunPCA(cdseq_synth_scRNA_seurat, npcs = 30,verbose = FALSE) #features = VariableFeatures(object = cdseq_synth_scRNA_seurat),
# batch correction
if(use_harmony){
cat("running Harmony..\n")
cdseq_synth_scRNA_seurat <- RunHarmony(cdseq_synth_scRNA_seurat,"batch")
use_reduction <- "harmony"
}else{
cat("No Harmony..\n")
use_reduction <- "pca"
}
cdseq_synth_scRNA_seurat <- Seurat::FindNeighbors(cdseq_synth_scRNA_seurat, dims = 1:30,reduction = use_reduction,verbose = FALSE)
cdseq_synth_scRNA_seurat <- Seurat::FindClusters(cdseq_synth_scRNA_seurat, resolution = 0.8, verbose = FALSE)
cdseq_synth_scRNA_seurat <- Seurat::RunUMAP(cdseq_synth_scRNA_seurat, reduction = use_reduction,dims = 1:30,verbose = FALSE)#min.dist=0.5, spread=10
Seurat::DimPlot(cdseq_synth_scRNA_seurat, reduction = "umap", group.by = "cell_type", label = TRUE)
dim(cdseq_synth_scRNA)
dim(cdseq_gep)
ncell <-  1
nr_cdseq <- nrow(cdseq_gep)
nc_cdseq <- ncol(cdseq_gep)
nr_sc <- nrow(sc_gep_train)
nc_sc <- ncol(sc_gep_train)
nb_mu <- mean(Matrix::colSums(sc_gep_train))#10000 # mean
nb_size <- nb_mu^2/( var(Matrix::colSums(sc_gep_train)) - nb_mu)#1000 # dispersion
cdseq_synth_scRNA <- matrix(0,nrow = nr_cdseq, ncol = nc_cdseq*ncell)
# take the max read counts from scRNAseq as the mean
#if(!is.null(sc_gep_train) && is.null(nb_mu) && is.null(nb_size)){nb_mu <- max(Matrix::colSums(sc_gep)); nb_size <- nb_mu^2}
for (i in 1:nc_cdseq) {
nreads <- rnbinom(n = ncell,size = nb_size, mu = nb_mu)
for (j in 1:ncell) {
cdseq_synth_scRNA[,(i-1)*ncell + j] <-  rmultinom(1,nreads[j],cdseq_gep[,i])
}
}
#colnames(cdseq_synth_scRNA) <- paste("CDSeq_SynthCell",rep(1:nc_cdseq,each = ncell), rep(1:ncell), sep = ".")
colnames(cdseq_synth_scRNA) <- paste(rep(colnames(cdseq_gep),each = ncell), "CDSeq" ,rep(1:ncell), sep = ".")
rownames(cdseq_synth_scRNA) <- rownames(cdseq_gep)
cdseq_sc_comb <- cbind(sc_gep_train,cdseq_synth_scRNA)
# check Seurat clustering
cdseq_synth_scRNA_seurat <- Seurat::CreateSeuratObject(counts = cdseq_sc_comb, project = "cdseq_synth_scRNAseq")
cdseq_synth_scRNA_seurat$cell_type <- c(sc_annotation_train$cell_type, rep("CDSeq",ncol(cdseq_synth_scRNA)))#sc_annotation_train$cell_type #
cdseq_synth_scRNA_seurat$batch <-c(train_batch, rep(0,ncol(cdseq_synth_scRNA)))# train_batch#
use_harmony <- 0
cell_filter <- 0
# filter cells
cdseq_synth_scRNA_seurat[["percent.mt"]] <- Seurat::PercentageFeatureSet(cdseq_synth_scRNA_seurat, pattern = "^MT-")
if(cell_filter){
cdseq_synth_scRNA_seurat <- subset(cdseq_synth_scRNA_seurat, subset = nFeature_RNA > 200 & nFeature_RNA < 4000  & percent.mt < 10)#nFeature_RNA > 20 & nFeature_RNA < 2500)
}
# normalize
cdseq_synth_scRNA_seurat <- Seurat::NormalizeData(cdseq_synth_scRNA_seurat, normalization.method = "LogNormalize" , scale.factor = 10000, verbose = FALSE)
# select genes
cdseq_synth_scRNA_seurat <- Seurat::FindVariableFeatures(cdseq_synth_scRNA_seurat, selection.method = "vst", nfeatures = 1000, verbose = FALSE)
cdseq_synth_scRNA_seurat <- Seurat::ScaleData(cdseq_synth_scRNA_seurat,verbose = FALSE)
cdseq_synth_scRNA_seurat <- Seurat::RunPCA(cdseq_synth_scRNA_seurat, npcs = 30,verbose = FALSE) #features = VariableFeatures(object = cdseq_synth_scRNA_seurat),
# batch correction
if(use_harmony){
cat("running Harmony..\n")
cdseq_synth_scRNA_seurat <- RunHarmony(cdseq_synth_scRNA_seurat,"batch")
use_reduction <- "harmony"
}else{
cat("No Harmony..\n")
use_reduction <- "pca"
}
cdseq_synth_scRNA_seurat <- Seurat::FindNeighbors(cdseq_synth_scRNA_seurat, dims = 1:30,reduction = use_reduction,verbose = FALSE)
cdseq_synth_scRNA_seurat <- Seurat::FindClusters(cdseq_synth_scRNA_seurat, resolution = 0.8, verbose = FALSE)
cdseq_synth_scRNA_seurat <- Seurat::RunUMAP(cdseq_synth_scRNA_seurat, reduction = use_reduction,dims = 1:30,verbose = FALSE)#min.dist=0.5, spread=10
Seurat::DimPlot(cdseq_synth_scRNA_seurat, reduction = "umap", group.by = "cell_type", label = TRUE)
nb_mu <- mean(Matrix::colSums(sc_gep_train))#10000 # mean
nb_size <- nb_mu^2/( var(Matrix::colSums(sc_gep_train)) - nb_mu)#1000
fig_name <- paste0("temp_cell_type_assign_",i)
cell_type_annotation <- CDSeq::cellTypeAssignSCRNA(cdseq_gep = cdseq_gep,
cdseq_prop = cdseq_prop,
sc_gep = sc_gep_train,#sc_gep_test,#
sc_annotation = sc_annotation_train,#sc_annotation_test,#
seurat_count_threshold = 10,
cdseq_pt_size = 5,
sc_pt_size = 3,
seurat_dims = 1:30,
seurat_resolution = 5,
nb_size = nb_size,
nb_mu = nb_mu,
fig_path = "~/Downloads/",
plot_umap = 1,
plot_tsne = 0,
fig_name = fig_name,
fig_format = "jpeg",
fig_dpi = 100,
fig_save = 1)
library(RColorBrewer)
#require(ggrepel)
n <- 9
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
col_vector
Seurat::DimPlot(cdseq_synth_scRNA_seurat, reduction = "umap", group.by = "cell_type", label = TRUE)
sc_annotation_train$cell_type[1]
unique(as.character(sc_annotation_train$cell_type))
col_vector[1:9]
my_colors <- c(col_vector[1:8],"black")
# plot
cdseq_df <- data.frame(umap1 = cdseq_synth_scRNA_seurat@reductions$umap@cell.embeddings[,1],
umap2 = cdseq_synth_scRNA_seurat@reductions$umap@cell.embeddings[,2],
cell_type = as.character(cdseq_synth_scRNA_seurat$cell_type))
ggplot(cdseq_df, aes(x=umap1,y=umap2)) +
geom_point(aes(colour = factor(cell_type))) +
scale_color_manual(value = my_colors)
###########################################################################
###########################################################################
###                                                                     ###
###                TEST ON CELL TYPE ANNOTATION FUNCTION                ###
###                                                                     ###
###########################################################################
###########################################################################
library(ggplot)
###########################################################################
###########################################################################
###                                                                     ###
###                TEST ON CELL TYPE ANNOTATION FUNCTION                ###
###                                                                     ###
###########################################################################
###########################################################################
library(ggplot2)
# plot
cdseq_df <- data.frame(umap1 = cdseq_synth_scRNA_seurat@reductions$umap@cell.embeddings[,1],
umap2 = cdseq_synth_scRNA_seurat@reductions$umap@cell.embeddings[,2],
cell_type = as.character(cdseq_synth_scRNA_seurat$cell_type))
ggplot(cdseq_df, aes(x=umap1,y=umap2)) +
geom_point(aes(colour = factor(cell_type))) +
scale_color_manual(value = my_colors)
ggplot(cdseq_df, aes(x=umap1,y=umap2)) +
geom_point(aes(colour = factor(cell_type))) +
scale_color_manual(values = my_colors)
ggplot(cdseq_df, aes(x=umap1,y=umap2,color=cell_type)) +
geom_point() +
scale_color_manual(values = my_colors)
Seurat::DimPlot(cdseq_synth_scRNA_seurat, reduction = "umap", group.by = "cell_type", label = TRUE)
ggplot(cdseq_df, aes(x=umap1,y=umap2,color=cell_type)) +
geom_point(size=0.5) +
scale_color_manual(values = my_colors)
Seurat::DimPlot(cdseq_synth_scRNA_seurat, reduction = "umap", group.by = "cell_type", label = TRUE)
Seurat::DimPlot(cdseq_synth_scRNA_seurat, reduction = "umap", group.by = "cell_type")
ggplot(cdseq_df, aes(x=umap1,y=umap2,color=cell_type)) +
geom_point(size=0.2) +
scale_color_manual(values = my_colors)
cdseq_df$cell_type[1]
cdseq_synth_scRNA_seurat$cell_type[1]
sc_gep_train <- train
colnames(sc_gep_train) <- paste0("cell_",1:ncol(train))
sc_annotation_train <- data.frame(cell_id = colnames(sc_gep_train),
cell_type = colnames(train),
stringsAsFactors = FALSE)
train_batch <- pDataC$SubjectName
# for immune cell only
train_batch <- sub("*\\..*","",pDataC$cell_id)
#train_pbmc1_idx <- which(pDataC$SubjectName == "pbmc1")
#sc_gep_train_s1 <- sc_gep_train[,train_pbmc1_idx]
#======  testing set ==========
sc_gep_test <- test
colnames(sc_gep_test) <- paste0("cell_",1:ncol(test))
sc_annotation_test <- data.frame(cell_id = colnames(sc_gep_test),
cell_type = colnames(test),
stringsAsFactors = FALSE)
test_batch <- pDataT$SubjectName
# use training data (the real ground truth)
train_merge <- t(rowsum(t(as.matrix(train)),colnames(train)))
pheatmap::pheatmap(cor(cdseq_gep,train_merge))
ncell <-  20
nr_cdseq <- nrow(cdseq_gep)
nc_cdseq <- ncol(cdseq_gep)
nr_sc <- nrow(sc_gep_train)
nc_sc <- ncol(sc_gep_train)
nb_mu <- mean(Matrix::colSums(sc_gep_train))#10000 # mean
nb_size <- nb_mu^2/( var(Matrix::colSums(sc_gep_train)) - nb_mu)#1000 # dispersion
cdseq_synth_scRNA <- matrix(0,nrow = nr_cdseq, ncol = nc_cdseq*ncell)
# take the max read counts from scRNAseq as the mean
#if(!is.null(sc_gep_train) && is.null(nb_mu) && is.null(nb_size)){nb_mu <- max(Matrix::colSums(sc_gep)); nb_size <- nb_mu^2}
for (i in 1:nc_cdseq) {
nreads <- rnbinom(n = ncell,size = nb_size, mu = nb_mu)
for (j in 1:ncell) {
cdseq_synth_scRNA[,(i-1)*ncell + j] <-  rmultinom(1,nreads[j],cdseq_gep[,i])
}
}
#colnames(cdseq_synth_scRNA) <- paste("CDSeq_SynthCell",rep(1:nc_cdseq,each = ncell), rep(1:ncell), sep = ".")
colnames(cdseq_synth_scRNA) <- paste(rep(colnames(cdseq_gep),each = ncell), "CDSeq" ,rep(1:ncell), sep = ".")
rownames(cdseq_synth_scRNA) <- rownames(cdseq_gep)
cdseq_sc_comb <- cbind(sc_gep_train,cdseq_synth_scRNA)
cdseq_synth_scRNA_seurat <- Seurat::CreateSeuratObject(counts = cdseq_sc_comb, project = "cdseq_synth_scRNAseq")
cdseq_synth_scRNA_seurat$cell_type <- c(as.character(sc_annotation_train$cell_type), rep("CDSeq",ncol(cdseq_synth_scRNA)))#sc_annotation_train$cell_type #
cdseq_synth_scRNA_seurat$batch <-c(train_batch, rep(0,ncol(cdseq_synth_scRNA)))# train_batch#
use_harmony <- 0
cell_filter <- 0
# filter cells
cdseq_synth_scRNA_seurat[["percent.mt"]] <- Seurat::PercentageFeatureSet(cdseq_synth_scRNA_seurat, pattern = "^MT-")
if(cell_filter){
cdseq_synth_scRNA_seurat <- subset(cdseq_synth_scRNA_seurat, subset = nFeature_RNA > 200 & nFeature_RNA < 4000  & percent.mt < 10)#nFeature_RNA > 20 & nFeature_RNA < 2500)
}
# normalize
cdseq_synth_scRNA_seurat <- Seurat::NormalizeData(cdseq_synth_scRNA_seurat, normalization.method = "LogNormalize" , scale.factor = 10000, verbose = FALSE)
# select genes
cdseq_synth_scRNA_seurat <- Seurat::FindVariableFeatures(cdseq_synth_scRNA_seurat, selection.method = "vst", nfeatures = 1000, verbose = FALSE)
cdseq_synth_scRNA_seurat <- Seurat::ScaleData(cdseq_synth_scRNA_seurat,verbose = FALSE)
cdseq_synth_scRNA_seurat <- Seurat::RunPCA(cdseq_synth_scRNA_seurat, npcs = 30,verbose = FALSE) #features = VariableFeatures(object = cdseq_synth_scRNA_seurat),
# batch correction
if(use_harmony){
cat("running Harmony..\n")
cdseq_synth_scRNA_seurat <- RunHarmony(cdseq_synth_scRNA_seurat,"batch")
use_reduction <- "harmony"
}else{
cat("No Harmony..\n")
use_reduction <- "pca"
}
cdseq_synth_scRNA_seurat <- Seurat::FindNeighbors(cdseq_synth_scRNA_seurat, dims = 1:30,reduction = use_reduction,verbose = FALSE)
cdseq_synth_scRNA_seurat <- Seurat::FindClusters(cdseq_synth_scRNA_seurat, resolution = 0.8, verbose = FALSE)
cdseq_synth_scRNA_seurat <- Seurat::RunUMAP(cdseq_synth_scRNA_seurat, reduction = use_reduction,dims = 1:30,verbose = FALSE)#min.dist=0.5, spread=10
Seurat::DimPlot(cdseq_synth_scRNA_seurat, reduction = "umap", group.by = "cell_type")
# plot
cdseq_df <- data.frame(umap1 = cdseq_synth_scRNA_seurat@reductions$umap@cell.embeddings[,1],
umap2 = cdseq_synth_scRNA_seurat@reductions$umap@cell.embeddings[,2],
cell_type = as.character(cdseq_synth_scRNA_seurat$cell_type),
stringsAsFactors = FALSE)
ggplot(cdseq_df, aes(x=umap1,y=umap2,color=cell_type)) +
geom_point(size=0.2) +
scale_color_manual(values = my_colors)
dim(cdseq_synth_scRNA)
dim(cdseq_gep)
my_colors
my_colors <- c(B = col_vector[1],
CD14 = col_vector[2],
CD4 = col_vector[3],
CD56 = col_vector[4],
Cytotoxic = col_vector[5],
CytotoxicNaive = col_vector[6],
Memory = col_vector[7],
Naive = col_vector[8],
CDSeq = "black")
ggplot(cdseq_df, aes(x=umap1,y=umap2,color=cell_type)) +
geom_point(size=0.2) +
scale_color_manual(values = my_colors)
# ==== test function =====
nb_mu <- mean(Matrix::colSums(sc_gep_train))#10000 # mean
nb_size <- nb_mu^2/( var(Matrix::colSums(sc_gep_train)) - nb_mu)#1000
fig_name <- paste0("temp_cell_type_assign_",i)
cell_type_annotation <- CDSeq::cellTypeAssignSCRNA(cdseq_gep = cdseq_gep,
cdseq_prop = cdseq_prop,
sc_gep = sc_gep_train,#sc_gep_test,#
sc_annotation = sc_annotation_train,#sc_annotation_test,#
seurat_count_threshold = 10,
cdseq_pt_size = 5,
sc_pt_size = 3,
seurat_dims = 1:30,
seurat_resolution = 5,
nb_size = nb_size,
nb_mu = nb_mu,
fig_path = "~/Downloads/",
plot_umap = 1,
plot_tsne = 0,
fig_name = fig_name,
fig_format = "jpeg",
fig_dpi = 100,
fig_save = 1)
?cellTypeAssignSCRNA
cell_type_annotation <- CDSeq::cellTypeAssignSCRNA(cdseq_gep = cdseq_gep,
cdseq_prop = cdseq_prop,
sc_gep = sc_gep_train,#sc_gep_test,#
sc_annotation = sc_annotation_train,#sc_annotation_test,#
seurat_count_threshold = 10,
cdseq_pt_size = 5,
sc_pt_size = 3,
seurat_npcs = 30,
seurat_dims = 1:30,
seurat_resolution = 5,
nb_size = nb_size,
nb_mu = nb_mu,
fig_path = "~/Downloads/",
plot_umap = 1,
plot_tsne = 0,
fig_name = fig_name,
fig_format = "jpeg",
fig_dpi = 100,
fig_save = 1)
Seurat::DimPlot(cdseq_synth_scRNA_seurat, reduction = "umap", group.by = "cell_type")
cell_type_annotation <- CDSeq::cellTypeAssignSCRNA(cdseq_gep = cdseq_gep,
cdseq_prop = cdseq_prop,
sc_gep = sc_gep_train,#sc_gep_test,#
sc_annotation = sc_annotation_train,#sc_annotation_test,#
seurat_count_threshold = 10,
cdseq_pt_size = 5,
sc_pt_size = 3,
seurat_nfeatures = 1000,
seurat_npcs = 30,
seurat_dims = 1:30,
seurat_resolution = 5,
nb_size = nb_size,
nb_mu = nb_mu,
fig_path = "~/Downloads/",
plot_umap = 1,
plot_tsne = 0,
fig_name = fig_name,
fig_format = "jpeg",
fig_dpi = 100,
fig_save = 1)
cell_type_annotation <- CDSeq::cellTypeAssignSCRNA(cdseq_gep = cdseq_gep,
cdseq_prop = cdseq_prop,
sc_gep = sc_gep_train,#sc_gep_test,#
sc_annotation = sc_annotation_train,#sc_annotation_test,#
seurat_count_threshold = 10,
cdseq_pt_size = 5,
sc_pt_size = 3,
seurat_nfeatures = 2000,
seurat_npcs = 30,
seurat_dims = 1:30,
seurat_resolution = 5,
nb_size = nb_size,
nb_mu = nb_mu,
fig_path = "~/Downloads/",
plot_umap = 1,
plot_tsne = 0,
fig_name = fig_name,
fig_format = "jpeg",
fig_dpi = 100,
fig_save = 1)
pheatmap::pheatmap(cor(cdseq_gep,train_merge))
ncell <-  100
nr_cdseq <- nrow(cdseq_gep)
nc_cdseq <- ncol(cdseq_gep)
nr_sc <- nrow(sc_gep_train)
nc_sc <- ncol(sc_gep_train)
nb_mu <- mean(Matrix::colSums(sc_gep_train))#10000 # mean
nb_size <- nb_mu^2/( var(Matrix::colSums(sc_gep_train)) - nb_mu)#1000 # dispersion
cdseq_synth_scRNA <- matrix(0,nrow = nr_cdseq, ncol = nc_cdseq*ncell)
# take the max read counts from scRNAseq as the mean
#if(!is.null(sc_gep_train) && is.null(nb_mu) && is.null(nb_size)){nb_mu <- max(Matrix::colSums(sc_gep)); nb_size <- nb_mu^2}
for (i in 1:nc_cdseq) {
nreads <- rnbinom(n = ncell,size = nb_size, mu = nb_mu)
for (j in 1:ncell) {
cdseq_synth_scRNA[,(i-1)*ncell + j] <-  rmultinom(1,nreads[j],cdseq_gep[,i])
}
}
#colnames(cdseq_synth_scRNA) <- paste("CDSeq_SynthCell",rep(1:nc_cdseq,each = ncell), rep(1:ncell), sep = ".")
colnames(cdseq_synth_scRNA) <- paste(rep(colnames(cdseq_gep),each = ncell), "CDSeq" ,rep(1:ncell), sep = ".")
rownames(cdseq_synth_scRNA) <- rownames(cdseq_gep)
cdseq_sc_comb <- cbind(sc_gep_train,cdseq_synth_scRNA)
# check Seurat clustering
cdseq_synth_scRNA_seurat <- Seurat::CreateSeuratObject(counts = cdseq_sc_comb, project = "cdseq_synth_scRNAseq")
cdseq_synth_scRNA_seurat$cell_type <- c(as.character(sc_annotation_train$cell_type), rep("CDSeq",ncol(cdseq_synth_scRNA)))#sc_annotation_train$cell_type #
cdseq_synth_scRNA_seurat$batch <-c(train_batch, rep(0,ncol(cdseq_synth_scRNA)))# train_batch#
use_harmony <- 0
cell_filter <- 0
# filter cells
cdseq_synth_scRNA_seurat[["percent.mt"]] <- Seurat::PercentageFeatureSet(cdseq_synth_scRNA_seurat, pattern = "^MT-")
if(cell_filter){
cdseq_synth_scRNA_seurat <- subset(cdseq_synth_scRNA_seurat, subset = nFeature_RNA > 200 & nFeature_RNA < 4000  & percent.mt < 10)#nFeature_RNA > 20 & nFeature_RNA < 2500)
}
# normalize
cdseq_synth_scRNA_seurat <- Seurat::NormalizeData(cdseq_synth_scRNA_seurat, normalization.method = "LogNormalize" , scale.factor = 10000, verbose = FALSE)
# select genes
cdseq_synth_scRNA_seurat <- Seurat::FindVariableFeatures(cdseq_synth_scRNA_seurat, selection.method = "vst", nfeatures = 1000, verbose = FALSE)
cdseq_synth_scRNA_seurat <- Seurat::ScaleData(cdseq_synth_scRNA_seurat,verbose = FALSE)
cdseq_synth_scRNA_seurat <- Seurat::RunPCA(cdseq_synth_scRNA_seurat, npcs = 30,verbose = FALSE) #features = VariableFeatures(object = cdseq_synth_scRNA_seurat),
# batch correction
if(use_harmony){
cat("running Harmony..\n")
cdseq_synth_scRNA_seurat <- RunHarmony(cdseq_synth_scRNA_seurat,"batch")
use_reduction <- "harmony"
}else{
cat("No Harmony..\n")
use_reduction <- "pca"
}
cdseq_synth_scRNA_seurat <- Seurat::FindNeighbors(cdseq_synth_scRNA_seurat, dims = 1:30,reduction = use_reduction,verbose = FALSE)
cdseq_synth_scRNA_seurat <- Seurat::FindClusters(cdseq_synth_scRNA_seurat, resolution = 0.8, verbose = FALSE)
cdseq_synth_scRNA_seurat <- Seurat::RunUMAP(cdseq_synth_scRNA_seurat, reduction = use_reduction,dims = 1:30,verbose = FALSE)#min.dist=0.5, spread=10
Seurat::DimPlot(cdseq_synth_scRNA_seurat, reduction = "umap", group.by = "cell_type")
cdseq_df <- data.frame(umap1 = cdseq_synth_scRNA_seurat@reductions$umap@cell.embeddings[,1],
umap2 = cdseq_synth_scRNA_seurat@reductions$umap@cell.embeddings[,2],
cell_type = as.character(cdseq_synth_scRNA_seurat$cell_type),
stringsAsFactors = FALSE)
ggplot(cdseq_df, aes(x=umap1,y=umap2,color=cell_type)) +
geom_point(size=0.2) +
scale_color_manual(values = my_colors)
dim(cdseq_synth_scRNA)
dim(sc_gep_train)
hist(colSums(sc_gep_train))
hist(colSums(sc_gep_train),breaks = 100)
hist(colSums(sc_gep_train),breaks = 1000)
hist(colSums(cdseq_synth_scRNA),breaks = 1000)
hist(colSums(cdseq_synth_scRNA),breaks = 100)
hist(colSums(cdseq_synth_scRNA),breaks = 100)
hist(colSums(sc_gep_train),breaks = 100)
train_batch
length(pDataC$cell_id)
# for immune cell only, the immune cells are from a single donor
#train_batch <- sub("*\\..*","",pDataC$cell_id)
train_batch <- rep("scRNA",length(pDataC$cell_id))
cdseq_synth_scRNA_seurat$batch <-c(train_batch, rep(0,ncol(cdseq_synth_scRNA)))# train_batch#
unique(cdseq_synth_scRNA_seurat$batch)
cdseq_synth_scRNA_seurat <- Seurat::CreateSeuratObject(counts = cdseq_sc_comb, project = "cdseq_synth_scRNAseq")
cdseq_synth_scRNA_seurat$cell_type <- c(as.character(sc_annotation_train$cell_type), rep("CDSeq",ncol(cdseq_synth_scRNA)))#sc_annotation_train$cell_type #
cdseq_synth_scRNA_seurat$batch <-c(train_batch, rep("CDSeq",ncol(cdseq_synth_scRNA)))# train_batch#
use_harmony <- 1
cell_filter <- 0
# filter cells
cdseq_synth_scRNA_seurat[["percent.mt"]] <- Seurat::PercentageFeatureSet(cdseq_synth_scRNA_seurat, pattern = "^MT-")
if(cell_filter){
cdseq_synth_scRNA_seurat <- subset(cdseq_synth_scRNA_seurat, subset = nFeature_RNA > 200 & nFeature_RNA < 4000  & percent.mt < 10)#nFeature_RNA > 20 & nFeature_RNA < 2500)
}
# normalize
cdseq_synth_scRNA_seurat <- Seurat::NormalizeData(cdseq_synth_scRNA_seurat, normalization.method = "LogNormalize" , scale.factor = 10000, verbose = FALSE)
# select genes
cdseq_synth_scRNA_seurat <- Seurat::FindVariableFeatures(cdseq_synth_scRNA_seurat, selection.method = "vst", nfeatures = 1000, verbose = FALSE)
cdseq_synth_scRNA_seurat <- Seurat::ScaleData(cdseq_synth_scRNA_seurat,verbose = FALSE)
cdseq_synth_scRNA_seurat <- Seurat::RunPCA(cdseq_synth_scRNA_seurat, npcs = 30,verbose = FALSE) #features = VariableFeatures(object = cdseq_synth_scRNA_seurat),
# batch correction
if(use_harmony){
cat("running Harmony..\n")
cdseq_synth_scRNA_seurat <- RunHarmony(cdseq_synth_scRNA_seurat,"batch")
use_reduction <- "harmony"
}else{
cat("No Harmony..\n")
use_reduction <- "pca"
}
cdseq_synth_scRNA_seurat <- Seurat::FindNeighbors(cdseq_synth_scRNA_seurat, dims = 1:30,reduction = use_reduction,verbose = FALSE)
cdseq_synth_scRNA_seurat <- Seurat::FindClusters(cdseq_synth_scRNA_seurat, resolution = 0.8, verbose = FALSE)
cdseq_synth_scRNA_seurat <- Seurat::RunUMAP(cdseq_synth_scRNA_seurat, reduction = use_reduction,dims = 1:30,verbose = FALSE)#min.dist=0.5, spread=10
Seurat::DimPlot(cdseq_synth_scRNA_seurat, reduction = "umap", group.by = "cell_type")
cdseq_df <- data.frame(umap1 = cdseq_synth_scRNA_seurat@reductions$umap@cell.embeddings[,1],
umap2 = cdseq_synth_scRNA_seurat@reductions$umap@cell.embeddings[,2],
cell_type = as.character(cdseq_synth_scRNA_seurat$cell_type),
stringsAsFactors = FALSE)
ggplot(cdseq_df, aes(x=umap1,y=umap2,color=cell_type)) +
geom_point(size=0.2) +
scale_color_manual(values = my_colors)
ggplot(cdseq_df, aes(x=umap1,y=umap2,color=cell_type)) +
geom_point(size=0.2) +
scale_color_manual(values = my_colors) +
guides(color = guide_legend(override.aes = list(size=5)), fill = guide_legend(override.aes = list(shape=21,size=5)))
pheatmap::pheatmap(cor(cdseq_gep,train_merge))
cdseq_correlation <- cor(cdseq_gep,train_merge)
cdseq_correlation
cdseq_correlation <- cor(cdseq_gep,train_merge)
matrixStats::rowMaxs(cdseq_correlation)
?which.max
which.max(cdseq_correlation[1,])
which.max(cdseq_correlation[2,])
which.max(cdseq_correlation[3,])
name(which.max(cdseq_correlation[3,]))
names(which.max(cdseq_correlation[3,]))
which.max(cdseq_correlation)
?lapply()
cdseq_annotation <- lapply(cdseq_correlation, which.max)
cdseq_annotation
dim(cdseq_correlation)
cdseq_annotation <- rep("a",ncol(cdseq_gep))
cdseq_annotation
dim(train_merge)
dim(cdseq_gep)
cdseq_annotation <- rep("a",ncol(cdseq_gep))
for (i in 1:ncol(cdseq_gep)) {
cdseq_annotation[i] <- names(which.max(cdseq_correlation[i,]))
}
cdseq_annotation
rep(1:3,2)
rep(1:3,each=2)
names(my_colors)
dim(cdseq_gep)
cdseq_colors <- col_vector[9:(ncol(cdseq_gep) + 9 )]
length(cdseq_colors)
cdseq_colors <- col_vector[9:(ncol(cdseq_gep) + 9 -1)]
cdseq_colors
my_colors <- c(my_colors,cdseq_colors)
cdseq_annotation
cdseq_synth_scRNA_seurat$cell_type <- c(as.character(sc_annotation_train$cell_type), paste0("CDSeq_",rep(cdseq_annotation,each=ncell)))#rep("CDSeq",ncol(cdseq_synth_scRNA))
ggplot(cdseq_df, aes(x=umap1,y=umap2,color=cell_type)) +
geom_point(size=0.2) +
scale_color_manual(values = my_colors) +
guides(color = guide_legend(override.aes = list(size=5)), fill = guide_legend(override.aes = list(shape=21,size=5)))
my_colors
my_colors <- c(B = col_vector[1],
CD14 = col_vector[2],
CD4 = col_vector[3],
CD56 = col_vector[4],
Cytotoxic = col_vector[5],
CytotoxicNaive = col_vector[6],
Memory = col_vector[7],
Naive = col_vector[8])
cdseq_colors <- col_vector[9:(ncol(cdseq_gep) + 9 -1)]
my_colors <- c(my_colors,cdseq_colors)
# plot
cdseq_df <- data.frame(umap1 = cdseq_synth_scRNA_seurat@reductions$umap@cell.embeddings[,1],
umap2 = cdseq_synth_scRNA_seurat@reductions$umap@cell.embeddings[,2],
cell_type = as.character(cdseq_synth_scRNA_seurat$cell_type),
stringsAsFactors = FALSE)
ggplot(cdseq_df, aes(x=umap1,y=umap2,color=cell_type)) +
geom_point(size=0.2) +
scale_color_manual(values = my_colors) +
guides(color = guide_legend(override.aes = list(size=5)), fill = guide_legend(override.aes = list(shape=21,size=5)))
colnames(cdseq_synth_scRNA)
is.integer(5)
is.integer(5.0)
is.numeric(5)
round(5)
round(5,2)
round(5.2)
?RunTSNE
